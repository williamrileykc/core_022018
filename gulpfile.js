// package vars
const pkg = require("./package.json");

// gulp
const gulp = require("gulp");

//---------------------------------------------------------------------------------------------
// Load all plugins in 'devDependencies' into the variable $
//---------------------------------------------------------------------------------------------

const $ = require('gulp-load-plugins')({
    pattern: ['*'],
    scope: ['devDependencies']
});

const banner = [
	"/* ===================================================================================",
	" *",
	" * @project        <%= pkg.name %>",
	" * @author         <%= pkg.author %>",
	" * @build          " + $.moment().format("llll") + " CST",
	" * @release        " + $.gitRevSync.long() + " [" + $.gitRevSync.branch() + "]",
	" * @copyright      Copyright (c) " + $.moment().format("YYYY") + ", <%= pkg.copyright %>",
	" *",
	" *  Do not edit this file! This file is machine-generated and constantly overwritten.",
	" *  Any changes you make will be overwritten the next time the /src is compiled.",
	" *  Edit the /src files to make edits and updates.",
	" *",
	" * =================================================================================== */",
	""
].join("\n");


//---------------------------------------------------------------------------------------------
// Explosion FX on error
//---------------------------------------------------------------------------------------------
var onError = function (err) {
	console.log(err);
	$.util.beep();
};

//---------------------------------------------------------------------------------------------
// TASK: A11y
//---------------------------------------------------------------------------------------------
gulp.task('a11y', function() {
	return gulp.src(pkg.paths.html.src)
		.pipe($.a11y())
		.pipe($.a11y.reporter());
});

//---------------------------------------------------------------------------------------------
// TASK: Clean
//---------------------------------------------------------------------------------------------

gulp.task('clean', function() {
	return gulp.src([
		pkg.paths.theme + pkg.paths.css.dist,
		pkg.paths.theme + pkg.paths.fonts.dist,
		pkg.paths.theme + pkg.paths.images.dist,
		pkg.paths.theme + pkg.paths.js.dist
	], { read: false }) // much faster
	    .pipe($.rimraf({ force: true }));
});

//---------------------------------------------------------------------------------------------
// TASK: Fonts
//---------------------------------------------------------------------------------------------
gulp.task('fonts', function() {

    return gulp.src(pkg.paths.fonts.src)
        .pipe(gulp.dest(pkg.paths.theme + pkg.paths.fonts.dist))
        .pipe($.filesize());
});

//---------------------------------------------------------------------------------------------
// TASK: Images
//---------------------------------------------------------------------------------------------

gulp.task('images', function () {
	return gulp.src(pkg.paths.images.src)
		.pipe($.imagemin({
			progressive: true,
			interlaced: true,
			optimizationLevel: 7,
			svgoPlugins: [{removeViewBox: false}],
			verbose: true,
			use: []
		}))
		.pipe(gulp.dest(pkg.paths.theme + pkg.paths.images.dist));
});

//---------------------------------------------------------------------------------------------
// TASK: Modernizr
//---------------------------------------------------------------------------------------------

gulp.task('modernizr', function() {
	gulp.src(pkg.paths.js.src + '**/*.js')
		.pipe($.modernizr({
			"options": pkg.paths.modernizr.options,
			"tests": pkg.paths.modernizr.tests,
			"excludeTests": pkg.paths.modernizr.excludeTests
		}))
		.pipe(gulp.dest(pkg.paths.theme + pkg.paths.js.dist))
		.pipe($.uglify())
		.pipe($.rename({ suffix: '.min' }))
		.pipe(gulp.dest(pkg.paths.theme + pkg.paths.js.dist))

});

//---------------------------------------------------------------------------------------------
// TASK: Scripts
//---------------------------------------------------------------------------------------------

gulp.task('scripts', function() {

    gulp.src(pkg.paths.js.copy)
        .pipe($.plumber())
        .pipe(gulp.dest(pkg.paths.theme + pkg.paths.js.dist))
        .pipe($.filesize());


    return gulp.src(pkg.paths.js.concatenate)
        .pipe($.plumber())
        .pipe($.concat(pkg.paths.js.concat_filename))
        .pipe($.header(banner, {pkg: pkg}))
        .pipe(gulp.dest(pkg.paths.theme + pkg.paths.js.dist))
        .pipe($.filesize())
        .pipe($.rename({ suffix: '.min' }))
        .pipe($.uglify())
        .pipe(gulp.dest(pkg.paths.theme + pkg.paths.js.dist))
        .pipe($.filesize());
});

//---------------------------------------------------------------------------------------------
// TASK: Styles
//---------------------------------------------------------------------------------------------

gulp.task('styles', function () {
	return gulp.src(pkg.paths.css.src)
		.pipe($.plumber())
		.pipe($.sass({ style: 'expanded',}).on('error', $.sass.logError).on('error', onError))
		.pipe($.header(banner, {pkg: pkg}))
		.pipe($.autoprefixer({
			browsers: ['last 2 versions'],
			cascade: false,
			remove: false
		}))
		.pipe($.csscomb())
		.pipe(gulp.dest(pkg.paths.theme + pkg.paths.css.dist))
		.pipe($.filesize())
		.pipe($.rename({ suffix: '.min' }))
		.pipe($.cssnano({
			colormin: false,
			autoprefixer: false,
			zindex: false,
		}))
		.pipe(gulp.dest(pkg.paths.theme + pkg.paths.css.dist))
		.pipe($.filesize());
});

//---------------------------------------------------------------------------------------------
// TASK: Stylelint
//---------------------------------------------------------------------------------------------
gulp.task("stylelint", function() {

 	// Stylelint config rules are managed in .stylelintrc

	var processors = [
		$.stylelint(),
		$.postcssReporter({
			clearMessages: true,
		})
	];

  return gulp.src(
      [pkg.paths.src + '**/*.scss']
    )
    .pipe($.postcss(processors, {syntax: $.postcssScss}));
});

//---------------------------------------------------------------------------------------------
// TASK: Validate
//---------------------------------------------------------------------------------------------
gulp.task('validate', function() {
	return gulp.src(pkg.paths.html.src)
		.pipe($.htmlhint())
		.pipe($.htmlhint.reporter())
});


//---------------------------------------------------------------------------------------------
// BUILD TASK: Run `gulp build`
// This is the build task, It will clean out all of the specified directories, compile and
// minify your sass, concatencate and minify your scripts, move necessary fonts, and compress
// and move images to the assets directory.
//---------------------------------------------------------------------------------------------

gulp.task('build', function() {
	$.runSequence('clean', ['modernizr', 'styles', 'scripts', 'fonts', 'images', 'validate']);
});


//---------------------------------------------------------------------------------------------
// DEVELOPMENT/WATCH TASK: Run `gulp`
// This is the development task. It is the task you will primarily use. It will watch
// for changes in your sass files, and recompile new CSS when it sees changes. It
// will do the same for javascript files as well.
//---------------------------------------------------------------------------------------------

gulp.task('default', function() {

	// Watch .scss files
	gulp.watch(pkg.paths.src + '**/*.scss', function(event) {
		console.log('File ' + event.path + ' was ' + event.type + ', running tasks...')
		gulp.start('styles');
	});
	
	// Watch .js files
	gulp.watch(pkg.paths.src + '**/*.js', function(event) {
		console.log('File ' + event.path + ' was ' + event.type + ', running tasks...')
		gulp.start('scripts');
	});
	
	// Watch IMG files
	gulp.watch(pkg.paths.src + 'media/images/**/*', function(event) {
		console.log('File ' + event.path + ' was ' + event.type + ', running tasks...')
		gulp.start('images');
	});
	
	// Watch .html files
	gulp.watch(pkg.paths.html.src, function(event) {
		console.log('File ' + event.path + ' was ' + event.type + ', running tasks...')
		gulp.start('validate');
	});
});